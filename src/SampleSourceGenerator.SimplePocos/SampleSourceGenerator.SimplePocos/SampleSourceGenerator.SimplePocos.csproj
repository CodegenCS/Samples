<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
      <Authors>Rick Drizin</Authors>
      <PackageLicenseExpression>MIT</PackageLicenseExpression>
      <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
      <PackageTags>codegen</PackageTags>
      <PackBuildOutput>true</PackBuildOutput>
      <PackageId>SampleSourceGenerator.SimplePocos</PackageId>
      <PackOnBuild>true</PackOnBuild>
      <PackFolder>analyzers\cs</PackFolder>
      <DebugType>embedded</DebugType>
      <DebugSymbols>true</DebugSymbols>
	  <LangVersion>preview</LangVersion>
      
      <Description>This is a sample C# Source Generator that will generate POCOs (based on a reverse-engineered JSON db schema) during compilation.</Description>
      <Copyright>Rick Drizin</Copyright>
      <Company>Rick Drizin</Company>
      <Version>1.0.0</Version>

      <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
      <DeterministicSourcePaths Condition="'$(EnableSourceLink)' == ''">false</DeterministicSourcePaths>


      <!--To use it just as an analyzer, add the following:    https://stackoverflow.com/questions/65010453/how-to-pack-a-c-sharp-9-source-generator-and-upload-it-to-the-nuget    -->      
      <IncludeBuildOutput>false</IncludeBuildOutput>   <!-- Do not include the generator as a lib dependency -->

      <NoPackageAnalysis>true</NoPackageAnalysis>


  </PropertyGroup>

  <ItemGroup>

      <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>


      <!-- looks like this alternative compiler will make the GeneratePathProperty (and respective includes) to fail -->
      <!--<PackageReference Include="Microsoft.Net.Compilers.Toolset" Version="4.1.0">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>-->


      <!--<Reference Include="netstandard" />-->
      <PackageReference Update="NETStandard.Library" PrivateAssets="all" />

	  <PackageReference Include="InterpolatedColorConsole" Version="1.0.2" />
	  <PackageReference Include="CodegenCS" Version="2.0.3" PrivateAssets="all" GeneratePathProperty="true" />
    <PackageReference Include="CodegenCS.DbSchema" Version="2.1.0" PrivateAssets="all" GeneratePathProperty="true" />

      <!-- Take a private dependency on Newtonsoft.Json (PrivateAssets=all) Consumers of this generator will not reference it.
         Set GeneratePathProperty=true so we can reference the binaries via the PKGNewtonsoft_Json property -->
      <PackageReference Include="Newtonsoft.Json" Version="13.0.1" PrivateAssets="all" GeneratePathProperty="true" />
    
      <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.1.0" PrivateAssets="all" GeneratePathProperty="true" />

      <!--<PackageReference Include="Microsoft.CodeAnalysis" Version="4.0.0" PrivateAssets="all" GeneratePathProperty="true" />-->

      <!--<PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3" PrivateAssets="all" />-->

    <!--<PackageReference Include="Microsoft.CodeAnalysis.Common" Version="3.9.0" />
      <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.9.0" PrivateAssets="all" />
      <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.2" PrivateAssets="all" />-->


      <!-- Package the generator in the analyzer directory of the nuget package -->
      <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />

      <!-- Package the dependencies alongside the generator assembly -->
      <!--<None Include="$(OutputPath)\..\..\..\..\..\CodegenCS.DbSchema\bin\$(Configuration)\netstandard2.0\CodegenCS.DbSchema.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
      <None Include="$(OutputPath)\..\..\..\..\..\CodegenCS\bin\$(Configuration)\netstandard2.0\CodegenCS.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />-->

      <!-- Package the dependencies alongside the generator assembly -->
      <None Include="$(PkgNewtonsoft_Json)\lib\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
      <None Include="$(PkgCodegenCS)\lib\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
      <None Include="$(PkgCodegenCS_DbSchema)\lib\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
      <!--<None Include="$(PkgMicrosoft_CodeAnalysis)\lib\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
      <None Include="$(PkgMicrosoft_CodeAnalysis_CSharp_Workspaces)\lib\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />-->

  </ItemGroup>

</Project>
